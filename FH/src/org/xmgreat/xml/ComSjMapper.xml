<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="org.xmgreat.mapper.ComSjMapper">

	<!-- 更新智能推荐的SQL语句 -->
	<update id="alertRule" parameterType="org.xmgreat.entity.RuleEntity">
		update ruleTb set
		figureId=#{figureId},lifeId=#{lifeId},workId=#{workId},marriedId=#{marriedId},salaryId=#{salaryId},hobbyId=#{hobbyId}
		where ruleId=#{ruleId}
	</update>

	<!-- 获取用户本身信息 -->
	<select id="getUser" parameterType="java.lang.Integer"
		resultType="org.xmgreat.entity.UserEntity">
		select * from userTb where userId=#{userId}
	</select>
	<!-- 获取用户的择偶要求 -->
	<select id="getMateEntity" parameterType="java.lang.Integer"
		resultType="org.xmgreat.entity.MateEntity">
		select * from mateTb where userId=#{userId}
	</select>
	<!-- 获取智能推荐的SQL语句 -->
	<select id="getRuleEntity" parameterType="java.lang.Integer"
		resultType="org.xmgreat.entity.RuleEntity">
		select * from ruleTb where ruleId=#{ruleId}
	</select>
	<!-- 通过查找出来的SQL语句获取智能推荐获取用户列表,联查所有条件表 根据判断rule表里面的字段，用union all取并集 -->
	<select id="getAllList" parameterType="org.xmgreat.entity.RmCdEntity"
		resultType="org.xmgreat.entity.UserEntity">
		<!-- 第一个根据择偶条件来进行旋转，其他的根据ruleTb里面的状态进行拼接 -->
		select distinct c.* from mateTb a ,mateTb b ,userTb c,showTb d where
		a.userId=#{mateEntity.userId} and c.userId=b.userId
		and
		a.lowAge=b.lowAge and a.hightAge=b.hightAge and a.height=b.height and
		a.nation=b.nation and a.address=b.address
		and a.married=b.married and
		a.doctor=b.doctor
		and c.sex=#{mateEntity.sex} and c.userId!=d.userId
		and to_char(c.lgTime)&gt;=#{mateEntity.month}
		<if test="ruleEntity.figureId==1">
			Union select distinct c.* from figureTb a ,figureTb b
			,userTb c,showTb d where a.userId=#{mateEntity.userId} and
			c.userId=b.userId
			and a.weight=b.weight and a.figure=b.figure and
			a.feature=b.feature and
			a.eyes=b.eyes and a.hair=b.hair
			and
			a.skin=b.skin and a.skinColor=b.skinColor and a.muscle=b.muscle and
			a.healthy=b.healthy
			and a.wearStyle=b.wearStyle and
			c.sex=#{mateEntity.sex} and c.userId!=d.userId and
			to_char(c.lgTime)&gt;=#{mateEntity.month}
		</if>
		<if test="ruleEntity.lifeId==1">
			Union select distinct c.* from lifeStyleTb a ,lifeStyleTb
			b ,userTb c,showTb d where a.userId=#{mateEntity.userId} and
			c.userId=b.userId
			and a.smoke=b.smoke and a.drink=b.drink and
			a.exercise=b.exercise and
			a.shopping=b.shopping and a.church=b.church
			and a.rest=b.rest and a.friend=b.friend and a.maxCost=b.maxCost and
			a.homeWork=b.homeWork and a.dohomeWork=b.dohomeWork
			and
			a.dietary=b.dietary and a.likeLevel=b.likeLevel and
			a.aboutPet=b.aboutPet and c.sex=#{mateEntity.sex} and
			c.userId!=d.userId and to_char(c.lgTime)&gt;=#{mateEntity.month}
		</if>
		<if test="ruleEntity.workId==1">
			Union select distinct c.* from workTb a ,workTb b ,userTb
			c,showTb d where a.userId=#{mateEntity.userId} and c.userId=b.userId
			and a.postion=b.postion and a.industry=b.industry and
			a.cpanyStyle=b.cpanyStyle and a.welfare=b.welfare and
			a.workStage=b.workStage
			and a.wortSea=b.wortSea and
			a.workHome=b.workHome and
			a.graduation=b.graduation and
			a.majorStyle=b.majorStyle and
			a.language=b.language
			and
			a.changeWork=b.changeWork and c.sex=#{mateEntity.sex} and
			c.userId!=d.userId and to_char(c.lgTime)&gt;=#{mateEntity.month}
		</if>
		<if test="ruleEntity.marriedId==1">
			Union select distinct c.* from marriedTb a ,marriedTb b
			,userTb c,showTb d where a.userId=#{mateEntity.userId} and
			c.userId=b.userId
			and a.nation=b.nation and a.character=b.character
			and a.humor=b.humor
			and a.temper=b.temper and a.feeling=b.feeling
			and
			a.chriden=b.chriden and a.marryTime=b.marryTime and
			a.relationShip=b.relationShip and a.marryMsg=b.marryMsg and
			a.liveParent=b.liveParent
			and a.ranking=b.ranking and
			a.brother=b.brother and
			a.parentMsg=b.parentMsg and
			a.parentWork=b.parentWork
			and a.parentSalary=b.parentSalary and
			a.parentInsurance=b.parentInsurance and c.sex=#{mateEntity.sex} and
			c.userId!=d.userId and to_char(c.lgTime)&gt;=#{mateEntity.month}
		</if>
		<if test="ruleEntity.salaryId==1">
			Union select distinct c.* from salaryTb a ,salaryTb b
			,userTb c,showTb d where a.userId=#{mateEntity.userId} and
			c.userId=b.userId
			and a.finance=b.finance and a.debt=b.debt and
			a.salaryPoint=b.salaryPoint and c.sex=#{mateEntity.sex} and
			c.userId!=d.userId and to_char(c.lgTime)&gt;=#{mateEntity.month}
		</if>
		<if test="ruleEntity.hobbyId==1">
			Union select distinct c.* from hobbyTb a ,hobbyTb b
			,userTb c,showTb d where a.userId=#{mateEntity.userId} and
			c.userId=b.userId
			and a.sport=b.sport and a.food=b.food and
			a.book=b.book and
			a.movie=b.movie and a.chanel=b.chanel
			and
			a.joke=b.joke and a.hobby=b.hobby and a.travle=b.travle and
			c.sex=#{mateEntity.sex} and c.userId!=d.userId and
			to_char(c.lgTime)&gt;=#{mateEntity.month}
		</if>
	</select>

	<!-- 获取曾经聊天过的用户 -->
	<select id="getChatList" parameterType="org.xmgreat.entity.UserEntity"
		resultType="org.xmgreat.entity.UserEntity">
		select distinct toUserId userId from chatTb where
		userId=#{userId} and to_char(msgTime)&gt;=#{lgTime}
	</select>

	<!-- 获取曾经发送过邮件 -->
	<select id="getEamilList" parameterType="org.xmgreat.entity.UserEntity"
		resultType="org.xmgreat.entity.UserEntity">
		select distinct toUserId userId from emailTb where
		userId=#{userId} and to_char(Time)&gt;=#{lgTime}
	</select>

	<!-- 获取曾经访问过的用户 -->
	<select id="getVisitList" parameterType="org.xmgreat.entity.UserEntity"
		resultType="org.xmgreat.entity.UserEntity">
		select distinct toUserId userId from visitTb where
		userId=#{userId} and to_char(Time)&gt;=#{lgTime}
	</select>

	<!-- 获取用户的外貌体型 -->
	<select id="getFigureEntity" resultType="org.xmgreat.entity.FigureEntity"
		parameterType="java.lang.Integer">
		select * from figureTb where userId=#{userId}
	</select>
	<!-- 获取用户的生活方式 -->
	<select id="getLifeEntity" resultType="org.xmgreat.entity.LifeEntity"
		parameterType="java.lang.Integer">
		select * from lifeStyleTb where userId=#{userId}
	</select>
	<!-- 获取用户的工作学习 -->
	<select id="getWorkEntity" resultType="org.xmgreat.entity.WorkEntity"
		parameterType="java.lang.Integer">
		select * from workTb where userId=#{userId}
	</select>
	<!-- 获取用户的婚姻状态 -->
	<select id="getMarriedEntity" resultType="org.xmgreat.entity.MarriedEntity"
		parameterType="java.lang.Integer">
		select * from marriedTb where userId=#{userId}
	</select>
	<!-- 获取用户的经济实力 -->
	<select id="getSalaryEntity" resultType="org.xmgreat.entity.SalaryEntity"
		parameterType="java.lang.Integer">
		select * from salaryTb where userId=#{userId}
	</select>
	<!-- 获取用户的兴趣爱好 -->
	<select id="getHobbyEntity" resultType="org.xmgreat.entity.HobbyEntity"
		parameterType="java.lang.Integer">
		select * from hobbyTb where userId=#{userId}
	</select>

	<!-- 获取门户访问量 -->
	<select id="getWebsite" resultType="java.lang.Integer">
		select visitCount from
		websiteTb
	</select>
	<!-- 更新门户访问量 -->
	<update id="updateWebSite" parameterType="java.lang.Integer">
		update websiteTb set
		visitCount=#{visitCount}
	</update>

	<!-- 获取所有未删除用户，未牵手成功用户 -->
	<select id="getAllUserList" resultType="org.xmgreat.entity.UserEntity">
		select * from userTb
		where userId in (select userId from userTb where
		deleteId!=16 minus
		select userId from showTb)
	</select>
	<!-- 将刷新后的分数更新到用户列表 -->
	<update id="updateBanking" parameterType="org.xmgreat.entity.UserEntity">
		update userTb set
		popular=#{popular} where userId=#{userId}
	</update>

	<!-- 获取用户一共收件数量 -->
	<select id="getEmail" resultType="java.lang.Integer"
		parameterType="java.lang.Integer">
		select count(*) from emailTb where userId=#{userId}
	</select>
	<!-- 获取用户一共有多少访问量 -->
	<select id="getVisit" resultType="java.lang.Integer"
		parameterType="java.lang.Integer">
		select count(*) from visitTb where userId=#{userId}
	</select>
	<!-- 获取用户可以享受的推荐数 -->
	<select id="getRem" resultType="java.lang.Integer"
		parameterType="java.lang.Integer">
		select a.recommend from comboTb a,comMiddleTb
		b,CTMiddleTb c where c.userId=#{userId} and b.timeId=c.timeId and
		a.comboId=b.comboId
	</select>
	<!-- 根据性别获取受欢迎程度前十的用户 -->
	<select id="getCityName" resultType="java.lang.String"
		parameterType="java.lang.Integer">
		select cityName from cityTb where cityId=#{cityId}
	</select>
	<!-- 根据性别获取受欢迎程度前十的用户 -->
	<select id="getUserList" resultType="org.xmgreat.entity.UserEntity"
		parameterType="org.xmgreat.entity.ConditionEntity">
		select *from ( select userTb.*,rownum rw from userTb
		where userId in(select userId from userTb where sex=#{sex} minus
		select
		userId from showTb) order by popular desc) where rw
		&lt;=#{currentPage}
	</select>

	<!-- 服务器后台套餐管理分页查询加模糊搜索 -->
	<select id="getComboEntity" resultType="org.xmgreat.entity.ComboEntity"
		parameterType="org.xmgreat.entity.ConditionEntity">
		select *from (select rownum rw ,comboTb.* from comboTb
		where
		deleteId!=16
		<if test='comName!=null and comName!=""'>
			and name like '%'||upper(#{comName,jdbcType=VARCHAR})||'%'
		</if>
		<if test='price!=null and price!=""'>
			and fare like '%'||upper(#{price,jdbcType=VARCHAR})||'%'
		</if>
		<!-- 模糊搜索的条件要用oracle内置的函数进行拼接 -->
		<if test='time!=null and time!=""'>
			and month like '%'||upper(#{time,jdbcType=VARCHAR})||'%'
		</if>
		order by comboId desc) where rw &gt;=#{forNum} and
		rw &lt;=#{toNum}
	</select>

	<!-- 服务器后台套餐管理不带分页查询加模糊搜索 -->
	<select id="getComboCount" resultType="org.xmgreat.entity.ComboEntity"
		parameterType="org.xmgreat.entity.ConditionEntity">
		select * from comboTb
		where
		deleteId!=16
		<if test='comName!=null and comName!=""'>
			and name like '%'||upper(#{comName,jdbcType=VARCHAR})||'%'
		</if>
		<if test='price!=null and price!=""'>
			and fare like '%'||upper(#{price,jdbcType=VARCHAR})||'%'
		</if>
		<if test='time!=null and time!=""'>
			and month like '%'||upper(#{time,jdbcType=VARCHAR})||'%'
		</if>
		order by comboId desc
	</select>

	<!-- 获取活动信息 -->
	<select id="getAct" parameterType="java.lang.Integer"
		resultType="org.xmgreat.entity.ActivityEntity">
		select * from activityTb where activityId=#{activityId}
	</select>
	<!-- 更新活动信息 -->
	<update id="updateAct" parameterType="org.xmgreat.entity.ActivityEntity">
		update activityTb set
		count=#{count},time=#{time},position=#{position},msg=#{msg},fare=#{fare},title=#{title},stage=#{stage},photoUrl=#{photoUrl},overTime=#{overTime}
		where activityId=#{activityId}
	</update>
	<!-- 服务器后台活动管理带分页查询加模糊搜索 -->
	<select id="getActivityEntity" resultType="org.xmgreat.entity.ActivityEntity"
		parameterType="org.xmgreat.entity.ConditionEntity">
		select * from( select
		rownum rw,activityTb.* from activityTb
		where
		1=1
		<if test='comName!=null and comName!=""'>
			and title like
			'%'||upper(#{comName,jdbcType=VARCHAR})||'%'
		</if>
		<if test='hapTimeS!=null and hapTimeS!=""'>
			and to_char(time)&gt;=#{hapTimeS}
		</if>
		<if test='count!=null and count!=""'>
			and count like '%'||upper(#{count,jdbcType=VARCHAR})||'%'
		</if>
		<if test='position!=null and position!=""'>
			and position like
			'%'||upper(#{position,jdbcType=VARCHAR})||'%'
		</if>
		<if test='price!=null and price!=""'>
			and fare like '%'||upper(#{price,jdbcType=VARCHAR})||'%'
		</if>
		<if test='onStage!=null and onStage!=""'>
			and stage =#{onStage}
		</if>
		<if test='hapTimeE!=null and hapTimeE!=""'>
			and to_char(overTime)&lt;=#{hapTimeE}
		</if>
		order by activityId desc) where rw
		&gt;=#{forNum} and
		rw
		&lt;=#{toNum}
	</select>
	<!-- 服务器后台活动管理不带分页查询加模糊搜索 -->
	<select id="getActivityCount" resultType="org.xmgreat.entity.ActivityEntity"
		parameterType="org.xmgreat.entity.ConditionEntity">
		select * from activityTb
		where
		1=1
		<if test='comName!=null and comName!=""'>
			and title like
			'%'||upper(#{comName,jdbcType=VARCHAR})||'%'
		</if>
		<if test='hapTimeS!=null and hapTimeS!=""'>
			and to_char(time)&gt;=#{hapTimeS}
		</if>
		<if test='count!=null and count!=""'>
			and count like '%'||upper(#{count,jdbcType=VARCHAR})||'%'
		</if>
		<if test='position!=null and position!=""'>
			and position like
			'%'||upper(#{position,jdbcType=VARCHAR})||'%'
		</if>
		<if test='price!=null and price!=""'>
			and fare like '%'||upper(#{price,jdbcType=VARCHAR})||'%'
		</if>
		<if test='onStage!=null and onStage!=""'>
			and stage =#{onStage}
		</if>
		<if test='hapTimeE!=null and hapTimeE!=""'>
			and to_char(overTime)&lt;=#{hapTimeE}
		</if>
		order by activityId desc
	</select>
	<!-- 获取后台分页条数 -->
	<select id="getNum" resultType="org.xmgreat.entity.ConditionEntity"
		parameterType="java.lang.Integer">
		select userData baseNum from doctorTb where
		styleName=#{styleName}
	</select>
	<!--获取套餐信息，进行套餐修改 -->
	<select id="getCom" resultType="org.xmgreat.entity.ComboEntity"
		parameterType="java.lang.Integer">
		select * from comboTb where comboId=#{comboId}
	</select>

	<!-- 新增套餐 -->
	<insert id="add" useGeneratedKeys="true" keyProperty="comboId"
		parameterType="org.xmgreat.entity.ComboEntity">
		<selectKey resultType="int" order="BEFORE" keyProperty="comboId">
			SELECT seqComboTb.NEXTVAL from dual
		</selectKey>
		insert into comboTb(comboId,name,fare,month,discount,recommend)
		values(#{comboId},#{name},#{fare},#{month},#{discount},#{recommend})
	</insert>

	<!-- 逻辑删除套餐 -->
	<update id="update" parameterType="java.lang.Integer">
		update comboTb set deleteId=16
		where comboId=#{comboId}
	</update>
	<!-- 套餐修改 -->
	<update id="updateCom" parameterType="org.xmgreat.entity.ComboEntity">
		update comboTb set
		name=#{name}, fare=#{fare},month=#{month},
		discount=#{discount},recommend=#{recommend} where comboId=#{comboId}
	</update>
	<!--获取套餐信息，对套餐名字查重 -->
	<select id="getCombo" resultType="org.xmgreat.entity.ComboEntity"
		parameterType="java.lang.String">
		select * from comboTb where name=#{name}
	</select>
</mapper>
	